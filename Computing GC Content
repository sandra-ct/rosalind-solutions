'''
Instructions:
Return the ID of the string having the highest GC-content, followed by the GC-content of that string.
'''

with open(r"sample.txt") as file:
   seq = file.readlines()

def total_gc(seq):
    total_gc, all_bases = 0, 0
    
    for details in seq.values():
        total_gc += details["gc_count"]
        all_bases += len(details["nucleotide"])
    
    return (total_gc / all_bases) * 100

def content(dna): 
    valid = ['A', 'C', 'G', 'T', 'U']
    sequences = {}
    current_title = ""
        
    for line in dna:
       if line.startswith(">"):
           current_title = line.strip().replace(">", "")
           sequences[current_title] = {}
       else:
           if "nucleotide" not in sequences[current_title]:
               sequences[current_title]["nucleotide"] = ""
          
           valid_sequence = []
           for letter in line:
                if letter in valid:
                    valid_sequence.append(letter)
           sequences[current_title]["nucleotide"] = sequences[current_title]["nucleotide"] + "".join(valid_sequence)
    # end parsing individual sequence data       
    
    for title, details in sequences.items(): 
        gc_count = 0
        for nuc in details["nucleotide"]:
            if nuc in ("G", "C"): 
                gc_count += 1
        details["gc_count"] = gc_count
        details["gc_percent"] = gc_count / len(details["nucleotide"]) * 100
        
    highest_percent = 0
    highest_name = ""
    for title, details in sequences.items():
        if details["gc_percent"] > highest_percent: 
            highest_percent = details["gc_percent"]
            highest_name = title 
    
    print("The sequence with the highest GC percentage is", highest_name, "snd its percentage is", highest_percent)
    print("The total percentage of guanine and cytosine bases in the entire document is", total_gc(sequences)) 

content(seq)
